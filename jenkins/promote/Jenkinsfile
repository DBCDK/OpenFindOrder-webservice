#!groovy

properties([buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: dscrumDefaults.numToKeepStr())),
            pipelineTriggers([]),
            disableConcurrentBuilds(),
            gitLabConnection('dbc-gitlab')
])

def PRODUCT = 'openfindorder'

def Buildnumber

node('master') {
    try {
        stage('Get current build number') {
            Buildnumber = dscrumArtifactory.getDockerLatest('docker-dscrum-dev', 'openfindorder')
        }

        manager.addShortText("Build ${Buildnumber}")

        stage('Promote') {
            def artyServer = Artifactory.server 'arty'

            def promotionConfig = [
                    'buildName'          : 'openfindorder',
                    'buildNumber'        : Buildnumber,
                    'targetRepo'         : 'docker-dscrum-prod',
                    'comment'            : 'Released for production by ' + dscrumUtil.getBuildUserId() + '.',
                    'sourceRepo'         : 'docker-dscrum-dev',
                    'status'             : 'Released',
                    'includeDependencies': true,
                    'copy'               : false
            ]

            echo "Promoting build ${Buildnumber} to production"

            artyServer.promote promotionConfig

        }
    } catch (e) {
        dscrumUtil.setFailureCause(e)
        throw e
    } finally {
        if (currentBuild.result == 'ABORTED') {
            slackSend(
                    color: 'warning',
                    message: "Promotion of *${PRODUCT}* #${Buildnumber} was cancelled."
            )
        } else if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {
            def slackMessage = "Build ${Buildnumber} of *${PRODUCT}* has been promoted for production by " + dscrumUtil.getCause() + '.'

            slackSend(
                    color: 'good',
                    message: slackMessage
            )
            slackSend(
                    color: 'good',
                    channel: '#d-scrum',
                    message: slackMessage
            )
        } else {
            slackSend(
                    color: 'danger',
                    message: "Build ${Buildnumber} of *${PRODUCT}* could not be promoted for production."
            )
        }
    }
}
